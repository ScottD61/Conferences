{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww9800\viewh13380\viewkind0
\deftab720
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Lab 13a -     Lab13a: SCALA PROGRAMMING WITH SPARK       \
=====================================================================================================================================================\
CopyRight - Big Data Trunk LLC\
www.BigDataTrunk.com\
Twitter - @BigDataTrunk\
\
======================================================================================================================================================\
The aim of this document is to learn and practice Scala Programming using the cloudera hadoop Quickstart vm CDH 5.3.0 \
\
====================================================================================================================================================\
#Spark is pre-installed in Quickstart vm CDH 5.3 .0. We need to enter into spark shell by changing present working directory which is shown below.\
cd /usr/lib/spark\
\
# Command to enter into Spark Shell. This would take you to the scala shell\
./bin/spark-shell\
\
#Variable types in scala:\
#Immutable\
\
val msg="Hello How are you"\
\
# You will see the below output\
# msg: String = Hello How are you\
\
# new value to msg\
msg = "How is your work?"\
\
# You will see the below error output\
# <console>:21: error: reassignment to val\
#       msg = "How is your work?"\
#This is below a val is immutable, \
\
\
# Working version\
\
var newmsg="Hello How are you"\
\
# In case of var you will be able to change as var is just a variable\
newmsg = \'93How is your work\'94\
\
\
#Type Inference:\
msg = 10\
\
#<console>:21: error: type mismatch;\
#found   : Int(10)\
#required: String\
#msg=10\
\
\
#Assigning Block Expression:\
val x=\{val a=20;  val b=100;b-a\}\
#x: Int = 80\
\
\
#Lazy Values:\
val file = scala.io.Source.fromFile("Unitedstates").mkString\
\
#<console>:19: error: object source is not a member of package io\
#val file = scala.io.source.fromFile("Unitedstates").mkstring\
\
lazy val file = scala.io.Source.fromFile("Unitedstates").mkString\
\
\
#Control Structures in Scala:\
var x = 5\
x: Int = 5\
Val s = if(x > 0 && x <6)1 else 0\
S: Int = 1\
Val s = id(x > 0 && x < 6)\'94positive\'94 else 0\
S: Any - positive\
\
#While Loop:\
var args = "700"\
var i = 0\
while(i<args.length)\
\{\
println(args(i))\
i+=1\
\}\
\
#For each Loop:\
var args="hi"\
args.foreach(arg=>println(arg))\
args.foreach(println)\
\
#For Loop:\
for (i<-1 to 5)\
println(i)\
\
#While traversing an array, following could be applied:\
\
val in ="Hello World"\
var sum=0\
for (i<-0 until in.length)sum+=i\
print(sum)\
\
#Advanced for loop: we can have multiple generators in for loop\
for(i<-1 to 3;j<-1 to 3)println(10*i+j)\
\
#We can put condition in multi generators for loop\
for(i<-1 to 3;j<-1 to 3 if i==j)println(10*i+j)\
\
#We can introduce variables in loop!\
for(i<-1 to 3; x=4-i;j<-x to 3)println(10*i+j)\
val x=for(i<-1 to 20)yield i*2.5\
for(i<-x)println(i)\
\
#******************************************************************************************\
#Functions:\
#******************************************************************************************\
def area(radius:Int):Double=\{3.14*radius*radius\}\
\
#We need to specify a data type for a recursive function:\
\
def factorial (n:Int):Int=if(n==0)1 else n*factorial(n-1)\
\
#Arrays:\
#Scala have only fixed length Arrays\
val n=new Array[Int] (10)\
val s=new Array[String] (10)\
val st=Array("Hello", "World")\
\
#ArrayBuffers:\
#Variable Length Arrays (Array buffers). Similar tojavaArrayList\
\
import scala.collection.mutable.ArrayBuffer\
val a=ArrayBuffer[Int]()\
a+=1\
a+=(2,3,5)\
a++=Array(6,7,8)\
\
#Arrays and ArrayBuffers:\
#Common Operations\
Array(1,2,3,4).sum\
Array(1,2,3,4).max\
val a=Array(1,7,2,9)\
a.mkString("**")\
\
#Traversing and transformation:\
for(el<-a)\
println(el)\
for(el<-a if el%2==0)yield(2*el)\
\
#Maps:\
#In scala,Map in a collection of pair.A pair is a group of two values (Not necessarily of same type)\
\
val mapping=Map("UnitedStates"->"UnitedKingdom","Tokyo"->"India")\
val mapping=scala.collection.mutable.Map("UnitedStates"->"U","Tokyo"->"I")\
val x=mapping("UnitedStates")\
val x=mapping.getOrElse("Unit",0)\
\
#Accessing maps\
mapping -="UnitedStates"\
mapping+=("Irland"->"Newzeland")\
for((u,i)<-mapping)yield(i,u)\
\
#Tuples:\
#Tuple is more generalized form of pair. Tuple has more than two values of potentially different types\
\
val a=(1,4,"Bob","Jack")\
a._2\
\
#In tuples the offset start with 1 and NOT from 0.\
\
#Tuples are typically used for the functions which return more than one value.\
\
"New Jercy".partition(_.isUpper)\
val lst = List(1,2)\
lst.head\
lst.tail\
\
#Operator adds a new list from given head and tail\
2::List(4,5)\
\
\
#We can use iterator to iterate over a list, but recursion is a preferred practice in scala \
def sum(l:List[Int]):Int=\{if(l==Nil)0 else l.head + sum(l.tail)\}\
val y=sum(lst)\
}